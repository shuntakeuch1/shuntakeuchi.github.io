<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2016-11-22T20:50:00+09:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>mysqlのデータ型</title>
    <link rel="alternate" href="http://blog.url.com/2016/11/22/mysql-start/"/>
    <id>http://blog.url.com/2016/11/22/mysql-start/</id>
    <published>2016-11-22T20:50:00+09:00</published>
    <updated>2016-12-11T10:37:24+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;今回、仕事でASP.net+AccessからLAMPに移行(てか再構築)する案件があるのでよく使うデータ型の再確認。&lt;/p&gt;

&lt;p&gt;参考は&lt;a href="https://dev.mysql.com/doc/refman/5.6/ja/data-types.html"&gt;コレ&lt;/a&gt;&lt;/p&gt;

&lt;h3 id="section"&gt;数値型&lt;/h3&gt;
&lt;p&gt;よく使うのはint・float・boolかな。&lt;br /&gt;
桁数で困るほどそんなに大きい数値を使わない事が多い。(42億って。)&lt;/p&gt;

&lt;table class="table"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style="text-align: left"&gt;Type&lt;/th&gt;
      &lt;th style="text-align: left"&gt;ビット数&lt;/th&gt;
      &lt;th style="text-align: left"&gt;補足&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style="text-align: left"&gt;bit&lt;/td&gt;
      &lt;td style="text-align: left"&gt;1-64&lt;/td&gt;
      &lt;td style="text-align: left"&gt;デフォルトは0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: left"&gt;tinyint&lt;/td&gt;
      &lt;td style="text-align: left"&gt;0-255&lt;/td&gt;
      &lt;td style="text-align: left"&gt;符号付きの範囲は-128~127&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: left"&gt;bool&lt;/td&gt;
      &lt;td style="text-align: left"&gt;0-255&lt;/td&gt;
      &lt;td style="text-align: left"&gt;0はfalse,0以外はture&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: left"&gt;int&lt;/td&gt;
      &lt;td style="text-align: left"&gt;0-4294967295&lt;/td&gt;
      &lt;td style="text-align: left"&gt;-2147483648 - 2147483647&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: left"&gt;bigint&lt;/td&gt;
      &lt;td style="text-align: left"&gt;0-18446744073709551615&lt;/td&gt;
      &lt;td style="text-align: left"&gt;-9223372036854775808 - 9223372036854775807&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: left"&gt; &lt;/td&gt;
      &lt;td style="text-align: left"&gt; &lt;/td&gt;
      &lt;td style="text-align: left"&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;それ以外もsmallintやmidumintなどがあるがintより小さいサイズであり、固定小数点のdecimalや浮動小数点のfloat、doubleなどを選ぶ事ができる。&lt;/p&gt;

&lt;p&gt;個人的にはbool(boolean)が内部的にはtinyintの動きをしているのが衝撃だった。&lt;br /&gt;
(疑っていたが実際に&lt;a href="http://qiita.com/ritukiii/items/3a3667391d4d65678d82"&gt;調査している人&lt;/a&gt;がいて分かりやすかった。)&lt;/p&gt;

&lt;h3 id="section-1"&gt;文字列型&lt;/h3&gt;

&lt;table class="table"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style="text-align: left"&gt;Type&lt;/th&gt;
      &lt;th style="text-align: left"&gt;長さ&lt;/th&gt;
      &lt;th style="text-align: left"&gt;補足&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style="text-align: left"&gt;char&lt;/td&gt;
      &lt;td style="text-align: left"&gt;0-255&lt;/td&gt;
      &lt;td style="text-align: left"&gt;固定長文字列、長さを省略すると長さは1になる&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: left"&gt;varchar&lt;/td&gt;
      &lt;td style="text-align: left"&gt;0-65535&lt;/td&gt;
      &lt;td style="text-align: left"&gt;可変長文字列、UTF8では最大21,844 文字&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: left"&gt;tinytext&lt;/td&gt;
      &lt;td style="text-align: left"&gt;255&lt;/td&gt;
      &lt;td style="text-align: left"&gt;長さは指定不可である&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: left"&gt;text&lt;/td&gt;
      &lt;td style="text-align: left"&gt;1-65535&lt;/td&gt;
      &lt;td style="text-align: left"&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: left"&gt;mediumtext&lt;/td&gt;
      &lt;td style="text-align: left"&gt;1-16777215&lt;/td&gt;
      &lt;td style="text-align: left"&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: left"&gt;longtext&lt;/td&gt;
      &lt;td style="text-align: left"&gt;1- 4,294,967,295&lt;/td&gt;
      &lt;td style="text-align: left"&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;ほかにも画像などのバイナリデータを入れる属性としてcharであればbynary、&lt;br /&gt;
varcharならばvarbynary、textのblobなどがシノニムとなっている。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Cakephp2.8 migrationの導入</title>
    <link rel="alternate" href="http://blog.url.com/2016/11/16/cakephp_migration/"/>
    <id>http://blog.url.com/2016/11/16/cakephp_migration/</id>
    <published>2016-11-16T00:05:00+09:00</published>
    <updated>2016-12-11T10:40:25+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;設計書管理システムの刷新のためデモ用のシステムを構築するので&lt;br /&gt;
今後、テーブル定義が変更しても良いようにMigrationを入れる。&lt;/p&gt;

&lt;p&gt;CakePHP3.x~はデフォルトでmigrationsが入っているらしい&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://book.cakephp.org/3.0/ja/migrations.html"&gt;Cookbook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;手順としては&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Migrationをgitコマンドで入れる。&lt;/li&gt;
  &lt;li&gt;bootstrap.phpでMigrationsを読み込む&lt;/li&gt;
  &lt;li&gt;初期マイグレーションの作成&lt;/li&gt;
  &lt;li&gt;適宜マイグレーションファイルを作成する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;プロジェクトがあるフォルダで行う&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git submodule add \
git://github.com/CakeDC/migrations.git app/Plugin/Migrations
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;app/Config/bootstrap.phpに記載する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CakePlugin::load(array('Migrations'));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;初期マイグレーションを作成する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Console/cake Migrations.migration run all -p
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;適宜スキーマを変更した際に行う。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Console/cake Migrations.migration generate -f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上。詳細はまた、おいおい更新していく予定です。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Gitメモ 特定のログまで戻す</title>
    <link rel="alternate" href="http://blog.url.com/2016/11/12/markdown3/"/>
    <id>http://blog.url.com/2016/11/12/markdown3/</id>
    <published>2016-11-12T12:40:00+09:00</published>
    <updated>2016-11-16T00:54:31+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;特定のコミット前に戻る。&lt;br /&gt;
Railsチュートリアルを進めていてあーでもないこうでもないとなって、収集がつかなくなったので戻した時のメモ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# コミットの履歴の確認
$ git log

commit &amp;lt;ハッシュ値&amp;gt;

# コミット前に戻る
$ git reset --hard &amp;lt;ハッシュ値&amp;gt;

# 最新の状態に戻る
$ git reset --hard ORIG_HEAD
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;簡単なオプションの説明として&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;–hard 「HEADの位置・インデックス・ワーキングツリー」全て&lt;/li&gt;
  &lt;li&gt;–mixed (orオプション無し)「HEADの位置・インデックス」&lt;/li&gt;
  &lt;li&gt;–soft 「HEADの位置」のみ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;取り急ぎ以上。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Rails チュートリアル</title>
    <link rel="alternate" href="http://blog.url.com/2016/11/12/markdown2/"/>
    <id>http://blog.url.com/2016/11/12/markdown2/</id>
    <published>2016-11-12T12:37:00+09:00</published>
    <updated>2016-12-04T18:08:45+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;先月から進めていた、&lt;a href="http://railstutorial.jp/"&gt;Rails チュートリアル&lt;/a&gt;が一通り終わりました。&lt;/p&gt;

&lt;p&gt;完成版は&lt;a href="https://infinite-dusk-90810.herokuapp.com/"&gt;これ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Railsの主要な機能であるモデル、ビュー、コントローラー、テンプレート、パーシャル、フィルタ、検証、コールバック、has_many/belongs_to through関連付け、セキュリティ、テスティング、デプロイを一通り学べて、Bootstrap、MinitestやSaas、Heroku、S3なども体験できる、Web経験の少ないエンジニアとしては良い体験でした。&lt;br /&gt;
Rubyについては&lt;a href="http://www.minituku.net/"&gt;Rubyがミニツク&lt;/a&gt;を一通りやってたら頭に入りやすい。&lt;/p&gt;

&lt;p&gt;次は&lt;a href="https://www.amazon.co.jp/dp/B00P0UR1RU/ref=dp-kindle-redirect?_encoding=UTF8&amp;amp;btkr=1"&gt;パーフェクトRuby on Rails&lt;/a&gt;などを勉強して見る。&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>Markdown記法</title>
    <link rel="alternate" href="http://blog.url.com/2016/11/12/markdown/"/>
    <id>http://blog.url.com/2016/11/12/markdown/</id>
    <published>2016-11-12T09:10:00+09:00</published>
    <updated>2016-11-13T01:11:22+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;以前、この記事で「
&lt;a href="http://shuntakeuchi.github.io/2016/11/06/launching-my-blog/"&gt;Middleman4 + github-pagesでブログ構築&lt;/a&gt;」ブログを構築したのですが&lt;br /&gt;
Markdownを使うのは初めてなので練習。&lt;/p&gt;

&lt;h2 id="h1"&gt;&lt;strong&gt;見出し&amp;lt;h1&amp;gt;&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;#(シャープ)を1つ付けることで&amp;lt;h1&amp;gt;、##を2つ付けることによって&amp;lt;h2&amp;gt;になる。#を一つずつ&lt;br /&gt;
増やすことによって&amp;lt;h3&amp;gt;、&amp;lt;h4&amp;gt;・・・と表現できる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#見出し1
##見出し2
###見出し3
####見出し4
#####見出し5
#####見出し6
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="section"&gt;見出し1&lt;/h1&gt;

&lt;h2 id="section-1"&gt;見出し2&lt;/h2&gt;

&lt;h3 id="section-2"&gt;見出し3&lt;/h3&gt;

&lt;h4 id="section-3"&gt;見出し4&lt;/h4&gt;

&lt;h5 id="section-4"&gt;見出し5&lt;/h5&gt;

&lt;h5 id="section-5"&gt;見出し6&lt;/h5&gt;

&lt;h2 id="p"&gt;&lt;strong&gt;段落&amp;lt;p&amp;gt;&lt;/strong&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;段落の後に空行を入れることで段落&amp;lt;p&amp;gt;となる&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;段落1

段落2段落2段落2段落2段落2段落2段落2段落2段落2段落2段落2段落2段落2段落2段落2段落2段落2段落2段落2段落2段落2段落2段落2段落2段落2

段落3。
段落3段落3段落3段落3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;段落1&lt;/p&gt;

&lt;p&gt;段落2段落2段落2段落2段落2段落2段落2段落2段落2段落2段落2段落2段落2段落2段落2段落2段落2段落2段落2段落2段落2段落2段落2段落2段落2&lt;/p&gt;

&lt;p&gt;段落3。
段落3段落3段落3段落3&lt;/p&gt;

&lt;h2 id="br"&gt;&lt;strong&gt;改行&lt;br /&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;行末でスペースを2つ以上を入れる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;スペースなし1。
スペースなし2。

スペースあり1  
スペースあり2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;スペースなし1。
スペースなし2。&lt;/p&gt;

&lt;p&gt;スペースあり1&lt;br /&gt;
スペースあり2&lt;/p&gt;

&lt;h2 id="section-6"&gt;&lt;strong&gt;強調&lt;/strong&gt;&lt;/h2&gt;
&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;強調なし  
*強調(em)*  
**強調(string)**  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;強調なし&lt;br /&gt;
&lt;em&gt;強調(em)&lt;/em&gt;&lt;br /&gt;
&lt;strong&gt;強調(string)&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id="section-7"&gt;&lt;strong&gt;コードブロック&lt;/strong&gt;&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;段落を変えて4つのスペースを挿入する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;空白なし  
    空白あり
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;空白なし&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;空白あり
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="section-8"&gt;&lt;strong&gt;リスト&lt;/strong&gt;&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;数値のリスト&lt;br /&gt;
数値の後にピリオドを書くと勝手に採番を行う。
番号が間違っていても大丈夫。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  1. リストの項目1  
  3. リストの項目2  
  3. リストの項目3
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;リストの項目1&lt;/li&gt;
  &lt;li&gt;リストの項目2&lt;/li&gt;
  &lt;li&gt;リストの項目3&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="section-9"&gt;&lt;strong&gt;順序なしリスト&lt;/strong&gt;&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;順序なしリストは段落の先頭で&lt;code&gt;*&lt;/code&gt;,&lt;code&gt;+&lt;/code&gt;,&lt;code&gt;-&lt;/code&gt;と半角スペースで項目を列挙する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 項目1  
+ 項目2  
- 項目3
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;項目1&lt;/li&gt;
  &lt;li&gt;項目2&lt;/li&gt;
  &lt;li&gt;項目3&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="section-10"&gt;&lt;strong&gt;リンク&lt;/strong&gt;&lt;/h2&gt;
&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;これは[リンク](http://shuntakeuchi.github.io)です。   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これは&lt;a href="http://shuntakeuchi.github.io"&gt;リンク&lt;/a&gt;です。&lt;/p&gt;

&lt;h2 id="section-11"&gt;&lt;strong&gt;画像&lt;/strong&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;これは ![画像](/assets/image/image.png) です。  
[] の中は画像が存在しない場合に表示されます。 ![画像](xxxx.png)  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これは &lt;img src="/images/image-b7c51a60.gif" alt="画像" /&gt; です。&lt;br /&gt;
[] の中は画像が存在しない場合に表示されます。 &lt;img src="/assets/images/xxxx.png" alt="画像" /&gt;&lt;/p&gt;

&lt;p&gt;とりあえずここまでで。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>PHPでスネークケースの変換</title>
    <link rel="alternate" href="http://blog.url.com/2016/11/11/casechange/"/>
    <id>http://blog.url.com/2016/11/11/casechange/</id>
    <published>2016-11-11T00:00:00+09:00</published>
    <updated>2016-11-12T11:52:20+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;PHPでキャメルケースからスネークケースに変換&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
// ファイルポインタを開く
$file = fopen("tmp.txt", "r");

// 1行ずつ読み込みスネークケースにして返す。
while ($line = fgets($file)) {
  echo strtolower(preg_replace('/[A-Z]/','_\0',$line));
}
// ファイルポインタを閉じる
fclose($file);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;てかRailsならもっと簡単。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require 'active_support/core_ext/string/inflections'
str.underscore #スネークケースにする
str.camelize #キャメルケースにする
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
</feed>
