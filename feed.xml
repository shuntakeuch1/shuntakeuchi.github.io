<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2017-11-28T17:01:00+09:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>ssh接続先の追加</title>
    <link rel="alternate" href="http://blog.url.com/2017/11/28/ssh_new_connect/"/>
    <id>http://blog.url.com/2017/11/28/ssh_new_connect/</id>
    <published>2017-11-28T17:01:00+09:00</published>
    <updated>2017-11-28T19:39:39+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;受託開発をしているとSSH接続先が増えてくるので&lt;br /&gt;
新しいssh鍵の作成とタブ補完で案件名と紐付けて接続する方法のメモ。&lt;/p&gt;

&lt;h2 id="ssh"&gt;新しくssh鍵の作成&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ ssh-keygen -t rsa
# ファイル名をきめて作成
$ ssh-keygen -f test -t rsa
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="section"&gt;タブ補完に追加&lt;/h2&gt;

&lt;p&gt;~/.ssh/configに下記を追記する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Host test # タブ補完するさいのエイリアス
  HostName 192.168.1.22 # ドメインでも可能。
  IdentityFile ~/.ssh/test
  User rogin_user_name
  port 22
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでssh t~って売ってからタブ補完できるようになる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ssh test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;※&lt;/strong&gt; 先程、躓いたのだがドメインを持っている場合、タブ補完する際に
先にDNSを探しにいくので仮にtest.localというドメインを持っていてssh t~と打つと先に&lt;strong&gt;test.local&lt;/strong&gt;が補完されてしまうので
Hostとドメインは同一が好ましい。&lt;/p&gt;

&lt;h2 id="section-1"&gt;参考&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://qiita.com/katsukii/items/2003485dab65bc37a90e"&gt;ssh-keygenコマンドで認証用のキーペア（秘密鍵と公開鍵）を生成する&lt;/a&gt;&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>デザインパターン入門</title>
    <link rel="alternate" href="http://blog.url.com/2017/11/24/design-pattern/"/>
    <id>http://blog.url.com/2017/11/24/design-pattern/</id>
    <published>2017-11-24T18:20:00+09:00</published>
    <updated>2017-11-26T00:22:56+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Java本格入門にデザインパターンの章があったので、勉強のために気になった言葉とサンプルコードを実装してみた。&lt;br /&gt;
プログラムも組むとなると、時間がかかりますが理解度が深まり私の中で昇華された気分になるので。&lt;/p&gt;

&lt;h3 id="section"&gt;デザインパターンとは&lt;/h3&gt;

&lt;p&gt;クラス構造のベストプラクティスで有名なデザインパターンとして23種類の「Gofデザインパターン」がある。&lt;br /&gt;
23種類のGofデザインパターンは下記の3種類に分類される。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;オブジェクトの「生成」に関するパターン&lt;/li&gt;
  &lt;li&gt;プログラムの「構造」に関するパターン&lt;/li&gt;
  &lt;li&gt;オブジェクトの「振る舞い」に関するパターン&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="section-1"&gt;デザインパターンを利用するメリット&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;再利用性が高い、柔軟な設計ができる。&lt;/li&gt;
  &lt;li&gt;意思疎通が容易になる。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id="section-2"&gt;生成に関するパターン&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;AbstaractFactory 関連する一覧のインスタンスを状況に応じて適切に生成する方法を提供する。&lt;/li&gt;
  &lt;li&gt;Builder 複合化されたインスタンスの生成過程を隠蔽する。&lt;/li&gt;
  &lt;li&gt;Singleton あるクラスについてインスタンスが単一であることを保証する。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;AbstaractFactoryパターン&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;インスタンスの生成を専門に行うクラス(Factory)を用意することで&lt;br /&gt;
整合性を保つ必要のある関連するインスタンス群をまちがいなく生成するためのパターンです。&lt;br /&gt;
現場のプログラムではフレームワークを作成する際に利用することが多いパターンです。
環境や条件によって処理パターンを切り替えて実行するしくみを実現する際にフレームワークの利用者が、
具体的な処理の中身を意識することなく透過的に呼び出すことができるのが利点です。&lt;/p&gt;

&lt;p&gt;サンプルは「設定ファイルに記載されたシステムの環境情報によってDBMSを切り替えて利用する」プログラム。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Builderパターン&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;複雑な生成過程が必要となるインスタンスについてその生産過程を隠蔽することにより、
同じ過程で異なる内部形式のインスタンスを得るパターンです。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Singletonパターン&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;システム内で常に同一のインスタンスを使いまわしたい場合に利用できます。
このパターンを応用すると「システム内で常に2つのみのインスタンスしか存在しないクラスを作る」と
いったことも容易にできます。現場のプログラムではシステム内で一意に情報を保持したい場合に用いるパターンです。
ただし、Singletonパターンを利用する場合は複数の処理が同時にインスタンスを操作しても整合性を損なうことがないよう、
インスタンスへの多重アクセスを想定した排他処理をおこなうことを考慮する必要があります。&lt;/p&gt;

&lt;h3 id="section-3"&gt;構造に関するパターン&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Adapter インターフェースに互換性のないクラス同士を組み合わせる&lt;/li&gt;
  &lt;li&gt;Composite 再帰的な構造の取扱いを容易にする。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Adapterパターン&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;インターフェースに互換性のないクラスどうしを組み合わせることを目的とし、
既存のシステムと新しいシステムのインターフェースの違いを吸収するAdapterを
用意することで少ない変更で既存のシステムを新しいシステムに適用できるようにします。
Adapterパターンは利用したいインターフェースを強制的に変えたい場合に利用できます。
現場のプログラムでは既に存在するクラスを変更することなく、別のインターフェースで呼び出す場合に利用できます。
あまり推奨されることではありませんがフレームワークを利用している際に「フレームワーク内部の処理をどうしても別の方法で呼びたい」
といった場合にも利用できる。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Compositeパターン&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Compositeパターンを用いることで再帰的な構造の記述が容易になり、メンテナンス性も向上させることができます。
現場のプログラムではツリー構造のデータを表現する際に利用します。&lt;/p&gt;

&lt;h3 id="section-4"&gt;振る舞いに関するパターン&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Command 「命令」をインスタンスとして扱うことにより、処理の組合せなどを容易にする。&lt;/li&gt;
  &lt;li&gt;Strategy 戦略を簡単に切り替えられる仕組みを提供する。&lt;/li&gt;
  &lt;li&gt;Iterator 保有するインスタンスの各要素に順番にアクセスする方法を提供する。&lt;/li&gt;
  &lt;li&gt;Observer あるインスタンスの状態が変化した際に、そのインスタンス自身が状態の変化を通知するしくみを提供する。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Commandパターン&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;「命令」自体をインスタンスとして扱うことにより処理の組合せなどを容易にするパターンです。
Commandの共通インターフェースと、処理の呼び出しをフレームワーク側で実装し、フレームワークの利用者にCommand
クラスを継承した具体的な処理パターンを実装してもらうという使い方が有効。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Strategyパターン&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;処理アルゴリズムを簡単に切り替えられるようにするパターンで、
条件によって処理のアルゴリズムだけを切り替えて実行したい場合に有効です。
Commandパターンと似ているようにみえるかもしれませんが、Commandパターンが「命令」そのものをオブジェクト化し、
処理対象を内部に保存しているのに対してStrategyパターンは「アルゴリズム」をオブジェクト化しているところが違いになります。
Strategyパターンを用いることで複数のアルゴリズムを切り替えて利用する場合に見通しの良いコードを書くことができるようになります。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Iteratorパターン&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;複数のインスタンスを保有する場合に、各要素に順番にアクセスする方法を提供するパターンです。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Observerパターン&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;あるインスタンスの状態が変化したことを観察し、そのインスタンス自身が状態の変化を通知するしくみを提供するパターンです。
Observerパターンを用いることで、インスタンスの状態の変更に応じて
直接呼び出し関係を持たないクラスに「通知」をおこない、処理を呼び出すことが可能になります。&lt;/p&gt;

&lt;h3 id="section-5"&gt;まとめ&lt;/h3&gt;

&lt;p&gt;とりあえず実装してみたのでサンプルコードは&lt;a href="https://github.com/shuntakeuch1/design-pattern-sample"&gt;こちら&lt;/a&gt;&lt;br /&gt;
今回はJavaで実装してみましたがオブジェクト指向全般に応用できるテクニックなので&lt;br /&gt;
無駄がなく、今後の品質の高い設計を行うための参考にできれば。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Emacsでバッファ保存時にブラウザをリロードする。</title>
    <link rel="alternate" href="http://blog.url.com/2017/06/28/save-and-sync/"/>
    <id>http://blog.url.com/2017/06/28/save-and-sync/</id>
    <published>2017-06-28T16:32:00+09:00</published>
    <updated>2017-11-25T21:51:36+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;最近、エディタをatomからEmacsに移行していてatomでは&lt;a href="https://atom.io/packages/browser-refresh"&gt;browser-refresh&lt;/a&gt;というパッケージがありvagrantでWeb開発している時に便利だったのでEmacsで似たようなのが無いか調べた所、applescriptで実現可能そうなのでやってみた。&lt;/p&gt;

&lt;h3 id="applescriptchrome"&gt;applescriptでchromeのアクティブなページを更新するスクリプトの準備&lt;/h3&gt;
&lt;p&gt;まずはスクリプトエディタを開きreload.scptという名前で~/.emacs.d/script/に保存する。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%882017-06-2817.02.38-6b5ce25f.png" alt="スクリーンショット" /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tell application "Google Chrome" to reload active tab of window 1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="initel"&gt;次にinit.elに下記を記載&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;;;chrome更新save-rehash
(defun reload-chrome ()"Save and reload browser"
(interactive)
(save-buffer)
(shell-command "osascript ~/.emacs.d/script/reload.scpt")
)
(global-set-key (kbd "&amp;lt;f5&amp;gt;") 'reload-chrome)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでF5を押すことによってバッファの保存とchrome更新が同時にできるので効率UP。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>若手エンジニアの生存戦略を聞いてきた。</title>
    <link rel="alternate" href="http://blog.url.com/2017/05/20/young-enjinear/"/>
    <id>http://blog.url.com/2017/05/20/young-enjinear/</id>
    <published>2017-05-20T19:44:00+09:00</published>
    <updated>2017-05-20T21:36:00+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;サポーターズ主催でMatsが講演する若手エンジニアの生存戦略にいってきました。&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://supporterz-seminar.connpass.com/event/54406/"&gt;https://supporterz-seminar.connpass.com/event/54406/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://supporterzcolab.com/dashboard/"&gt;サポーターズ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- 講演内容はzuckey_17’sさんがはてなで書いてくれています。

- [https://supporterz-seminar.connpass.com/event/54406/
](https://supporterz-seminar.connpass.com/event/54406/
) --&gt;

&lt;p&gt;これはただの感想をぶつけるだけの記事なので、講演の内容を知りたいとかであれば他へどうぞ。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;率直な感想として、IT業界とくにSIで疲弊した私にとって我慢することは何も価値を産まないというのは共感できたし、仕事をすることによって価値を提供するのが働く本質であるという考え方を聞いて、早々に転職を決意した私にとって、すごく気持ちが楽になったというのが感想である。&lt;/p&gt;

&lt;p&gt;もちろん、今更、後悔をしているわけではないが、少し心に引っかかていた部分が取れた気分である。&lt;br /&gt;
個人的な発見はMatzも学生時代にマクドナルドでアルバイトをしていてインベントリー(棚卸し:材料によっては毎日、毎週、毎月ある)の話をしたのはオッとなるポイントであった。&lt;/p&gt;

&lt;h3 id="section"&gt;自分の生存戦略を作ろう&lt;/h3&gt;
&lt;p&gt;生存戦略として下記が必要&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;死なないこと&lt;/li&gt;
  &lt;li&gt;パターン認識能力&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;パターン認識能力は、今までITの分野で成功した人でスティーブジョブスやビル・ゲイツの自伝を読んで、そのまま同じことやっても意味は無いけど成功した人たちで共通した能力としてパターンの認識能力があったよという話。&lt;/p&gt;

&lt;p&gt;死なないことは勝手に解釈すると働きつづけることであり、理不尽にも負けずに頑張るとかではなく、価値を提供し続けることかな。(勝手に解釈)&lt;br /&gt;
Matzの講演聞いたのはを初めてだったがプログラマの三大美徳を重要視していて、楽しくコードを書き続けるというRubyのコンセプト通りの講演内容でありMatzの戦略というよりかは生き方、経験の話が主だったかな。&lt;/p&gt;

&lt;h2 id="section-1"&gt;まとめ&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;理不尽をしない&lt;/li&gt;
  &lt;li&gt;我慢をしない。&lt;/li&gt;
  &lt;li&gt;プログラミングを極めよう&lt;/li&gt;
  &lt;li&gt;問題解決を極めよう&lt;/li&gt;
  &lt;li&gt;思い込みを打破しよう&lt;/li&gt;
  &lt;li&gt;プログラマーは人生の勝ち組(笑)&lt;/li&gt;
  &lt;li&gt;生存戦略としては差別化すること&lt;/li&gt;
  &lt;li&gt;大変だがアウトプットをすること クオリティは棚上げして自分の実力が追いつくことがある。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この記事にも書いてあるが
&lt;a href="https://codeiq.jp/magazine/2017/05/50861/"&gt;プログラマの三大美徳&lt;/a&gt;
出典元:codeiq&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;怠惰：全体の労力を減らすために手間を惜しまない気質。この気質のも主は、役立つプログラムを書いてみんなの苦労を減らしたり、同じ質問に何度も答えなくても言いように文書を書いたりする。&lt;/p&gt;

  &lt;p&gt;短気：コンピュータが怠惰なときに感じる怒り。この怒りの持ち主は、今ある問題に対応するプログラムにとどまらず、今後起こりうる問題を想定したプログラムを書く。少なくともそうしようとする。よって、プログラマの第二の美徳である。&lt;/p&gt;

  &lt;p&gt;傲慢：神罰が下るほどの過剰な自尊心。または人様に対して恥ずかしくないプログラムを書き、また保守しようとする気質。よって、プログラマの第三の美徳である。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
  </entry>
  <entry>
    <title>mysqlのデータ型</title>
    <link rel="alternate" href="http://blog.url.com/2016/11/22/mysql-start/"/>
    <id>http://blog.url.com/2016/11/22/mysql-start/</id>
    <published>2016-11-22T20:50:00+09:00</published>
    <updated>2016-12-11T10:37:24+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;今回、仕事でASP.net+AccessからLAMPに移行(てか再構築)する案件があるのでよく使うデータ型の再確認。&lt;/p&gt;

&lt;p&gt;参考は&lt;a href="https://dev.mysql.com/doc/refman/5.6/ja/data-types.html"&gt;コレ&lt;/a&gt;&lt;/p&gt;

&lt;h3 id="section"&gt;数値型&lt;/h3&gt;
&lt;p&gt;よく使うのはint・float・boolかな。&lt;br /&gt;
桁数で困るほどそんなに大きい数値を使わない事が多い。(42億って。)&lt;/p&gt;

&lt;table class="table"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style="text-align: left"&gt;Type&lt;/th&gt;
      &lt;th style="text-align: left"&gt;ビット数&lt;/th&gt;
      &lt;th style="text-align: left"&gt;補足&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style="text-align: left"&gt;bit&lt;/td&gt;
      &lt;td style="text-align: left"&gt;1-64&lt;/td&gt;
      &lt;td style="text-align: left"&gt;デフォルトは0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: left"&gt;tinyint&lt;/td&gt;
      &lt;td style="text-align: left"&gt;0-255&lt;/td&gt;
      &lt;td style="text-align: left"&gt;符号付きの範囲は-128~127&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: left"&gt;bool&lt;/td&gt;
      &lt;td style="text-align: left"&gt;0-255&lt;/td&gt;
      &lt;td style="text-align: left"&gt;0はfalse,0以外はture&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: left"&gt;int&lt;/td&gt;
      &lt;td style="text-align: left"&gt;0-4294967295&lt;/td&gt;
      &lt;td style="text-align: left"&gt;-2147483648 - 2147483647&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: left"&gt;bigint&lt;/td&gt;
      &lt;td style="text-align: left"&gt;0-18446744073709551615&lt;/td&gt;
      &lt;td style="text-align: left"&gt;-9223372036854775808 - 9223372036854775807&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: left"&gt; &lt;/td&gt;
      &lt;td style="text-align: left"&gt; &lt;/td&gt;
      &lt;td style="text-align: left"&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;それ以外もsmallintやmidumintなどがあるがintより小さいサイズであり、固定小数点のdecimalや浮動小数点のfloat、doubleなどを選ぶ事ができる。&lt;/p&gt;

&lt;p&gt;個人的にはbool(boolean)が内部的にはtinyintの動きをしているのが衝撃だった。&lt;br /&gt;
(疑っていたが実際に&lt;a href="http://qiita.com/ritukiii/items/3a3667391d4d65678d82"&gt;調査している人&lt;/a&gt;がいて分かりやすかった。)&lt;/p&gt;

&lt;h3 id="section-1"&gt;文字列型&lt;/h3&gt;

&lt;table class="table"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style="text-align: left"&gt;Type&lt;/th&gt;
      &lt;th style="text-align: left"&gt;長さ&lt;/th&gt;
      &lt;th style="text-align: left"&gt;補足&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style="text-align: left"&gt;char&lt;/td&gt;
      &lt;td style="text-align: left"&gt;0-255&lt;/td&gt;
      &lt;td style="text-align: left"&gt;固定長文字列、長さを省略すると長さは1になる&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: left"&gt;varchar&lt;/td&gt;
      &lt;td style="text-align: left"&gt;0-65535&lt;/td&gt;
      &lt;td style="text-align: left"&gt;可変長文字列、UTF8では最大21,844 文字&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: left"&gt;tinytext&lt;/td&gt;
      &lt;td style="text-align: left"&gt;255&lt;/td&gt;
      &lt;td style="text-align: left"&gt;長さは指定不可である&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: left"&gt;text&lt;/td&gt;
      &lt;td style="text-align: left"&gt;1-65535&lt;/td&gt;
      &lt;td style="text-align: left"&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: left"&gt;mediumtext&lt;/td&gt;
      &lt;td style="text-align: left"&gt;1-16777215&lt;/td&gt;
      &lt;td style="text-align: left"&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: left"&gt;longtext&lt;/td&gt;
      &lt;td style="text-align: left"&gt;1- 4,294,967,295&lt;/td&gt;
      &lt;td style="text-align: left"&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;ほかにも画像などのバイナリデータを入れる属性としてcharであればbynary、&lt;br /&gt;
varcharならばvarbynary、textのblobなどがシノニムとなっている。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Cakephp2.8 migrationの導入</title>
    <link rel="alternate" href="http://blog.url.com/2016/11/16/cakephp_migration/"/>
    <id>http://blog.url.com/2016/11/16/cakephp_migration/</id>
    <published>2016-11-16T00:05:00+09:00</published>
    <updated>2016-12-11T10:40:25+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;設計書管理システムの刷新のためデモ用のシステムを構築するので&lt;br /&gt;
今後、テーブル定義が変更しても良いようにMigrationを入れる。&lt;/p&gt;

&lt;p&gt;CakePHP3.x~はデフォルトでmigrationsが入っているらしい&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://book.cakephp.org/3.0/ja/migrations.html"&gt;Cookbook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;手順としては&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Migrationをgitコマンドで入れる。&lt;/li&gt;
  &lt;li&gt;bootstrap.phpでMigrationsを読み込む&lt;/li&gt;
  &lt;li&gt;初期マイグレーションの作成&lt;/li&gt;
  &lt;li&gt;適宜マイグレーションファイルを作成する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;プロジェクトがあるフォルダで行う&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git submodule add \
git://github.com/CakeDC/migrations.git app/Plugin/Migrations
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;app/Config/bootstrap.phpに記載する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CakePlugin::load(array('Migrations'));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;初期マイグレーションを作成する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Console/cake Migrations.migration run all -p
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;適宜スキーマを変更した際に行う。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Console/cake Migrations.migration generate -f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上。詳細はまた、おいおい更新していく予定です。&lt;/p&gt;
</content>
  </entry>
</feed>
